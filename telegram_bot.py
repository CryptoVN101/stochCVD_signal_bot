"""
Bot Telegram - CryptoVN 101
G·ª≠i t√≠n hi·ªáu giao d·ªãch l√™n channel
"""

import asyncio
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.constants import ParseMode

import config
from database import DatabaseManager
from signal_scanner import SignalScanner

# C·∫•u h√¨nh logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class TelegramBot:
    """
    L·ªõp qu·∫£n l√Ω Telegram Bot
    """
    
    def __init__(self):
        """Kh·ªüi t·∫°o bot"""
        self.db = DatabaseManager()
        self.scanner = SignalScanner()
        self.app = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
        
        # ƒêƒÉng k√Ω c√°c l·ªánh
        self.app.add_handler(CommandHandler("start", self.cmd_start))
        self.app.add_handler(CommandHandler("add", self.cmd_add))
        self.app.add_handler(CommandHandler("remove", self.cmd_remove))
        self.app.add_handler(CommandHandler("list", self.cmd_list))
        self.app.add_handler(CommandHandler("help", self.cmd_help))
        
        # Th√™m c√°c symbol m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
        self._init_default_symbols()
    
    def _init_default_symbols(self):
        """Th√™m c√°c symbol m·∫∑c ƒë·ªãnh v√†o database"""
        for symbol in config.DEFAULT_SYMBOLS:
            symbol_clean = symbol.replace('/', '')
            self.db.add_symbol(symbol_clean)
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """L·ªánh /start"""
        welcome_msg = """
ü§ñ <b>Bot CryptoVN 101 - T√≠n hi·ªáu StochCVD</b>

Ch√†o m·ª´ng! Bot s·∫Ω t·ª± ƒë·ªông g·ª≠i t√≠n hi·ªáu giao d·ªãch l√™n channel.

<b>C√°c l·ªánh c√≥ s·∫µn:</b>
/add BTCUSDT - Th√™m coin v√†o danh s√°ch theo d√µi
/remove BTCUSDT - X√≥a coin kh·ªèi danh s√°ch
/list - Xem danh s√°ch ƒëang theo d√µi
/help - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng

<b>Thi·∫øt l·∫≠p:</b>
üìä CVD: Fractal=1, Period=16, Mode=EMA, Khung H1
üìà Stochastic: K=16, Smooth=16, D=8
üìç Support/Resistance: Filter t√≠n hi·ªáu t·∫°i v√πng quan tr·ªçng

<b>ƒêi·ªÅu ki·ªán t√≠n hi·ªáu:</b>
üü¢ BUY: CVD ph√¢n k·ª≥ tƒÉng + Stoch H1<25 & M15<25 + Low ch·∫°m Support
üî¥ SELL: CVD ph√¢n k·ª≥ gi·∫£m + Stoch H1>75 & M15>75 + High ch·∫°m Resistance
"""
        await update.message.reply_text(welcome_msg, parse_mode=ParseMode.HTML)
    
    async def cmd_add(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """L·ªánh /add SYMBOL"""
        if not context.args:
            await update.message.reply_text("‚ö†Ô∏è C√°ch d√πng: /add BTCUSDT")
            return
        
        symbol = context.args[0]
        success, message = self.db.add_symbol(symbol)
        await update.message.reply_text(message)
        
        if success:
            logger.info(f"ƒê√£ th√™m {symbol} v√†o watchlist")
    
    async def cmd_remove(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """L·ªánh /remove SYMBOL"""
        if not context.args:
            await update.message.reply_text("‚ö†Ô∏è C√°ch d√πng: /remove BTCUSDT")
            return
        
        symbol = context.args[0]
        success, message = self.db.remove_symbol(symbol)
        await update.message.reply_text(message)
        
        if success:
            logger.info(f"ƒê√£ x√≥a {symbol} kh·ªèi watchlist")
    
    async def cmd_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """L·ªánh /list"""
        watchlist = self.db.get_watchlist_info()
        
        if not watchlist:
            await update.message.reply_text("üìù Danh s√°ch theo d√µi ƒëang tr·ªëng")
            return
        
        msg = f"üìù <b>Danh s√°ch ƒëang theo d√µi ({len(watchlist)} coin):</b>\n\n"
        
        for idx, item in enumerate(watchlist, 1):
            added_time = item['added_at'].strftime('%d-%m-%Y %H:%M')
            msg += f"{idx}. <code>{item['symbol']}</code>\n"
            msg += f"   ‚îú Th√™m l√∫c: {added_time}\n\n"
        
        await update.message.reply_text(msg, parse_mode=ParseMode.HTML)
    
    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """L·ªánh /help"""
        help_msg = """
üìö <b>H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG BOT</b>

<b>1. Th√™m coin theo d√µi:</b>
/add BTCUSDT
/add BTC (t·ª± ƒë·ªông th√™m USDT)
/add ETH

<b>2. X√≥a coin:</b>
/remove BTCUSDT
/remove BTC

<b>3. Xem danh s√°ch:</b>
/list

<b>4. Gi·∫£i th√≠ch t√≠n hi·ªáu:</b>

üü¢ <b>T√≠n hi·ªáu BUY/LONG:</b>
- CVD b√°o ph√¢n k·ª≥ tƒÉng tr√™n H1
- Stochastic H1 < 25 V√Ä M15 < 25
- Low c·ªßa n·∫øn ch·∫°m v√πng Support
‚Üí T√≠n hi·ªáu ƒë·∫£o chi·ªÅu tƒÉng

üî¥ <b>T√≠n hi·ªáu SELL/SHORT:</b>
- CVD b√°o ph√¢n k·ª≥ gi·∫£m tr√™n H1
- Stochastic H1 > 75 V√Ä M15 > 75
- High c·ªßa n·∫øn ch·∫°m v√πng Resistance
‚Üí T√≠n hi·ªáu ƒë·∫£o chi·ªÅu gi·∫£m

‚ö†Ô∏è <b>L∆∞u √Ω:</b>
- ƒê√¢y ch·ªâ l√† c√¥ng c·ª• h·ªó tr·ª£
- Lu√¥n s·ª≠ d·ª•ng stop loss
- Kh√¥ng giao d·ªãch to√†n b·ªô v·ªën
"""
        await update.message.reply_text(help_msg, parse_mode=ParseMode.HTML)
    
    def format_signal_message(self, signal):
        """
        Format message t√≠n hi·ªáu
        
        Args:
            signal: Dict ch·ª©a th√¥ng tin t√≠n hi·ªáu
            
        Returns:
            str: Message ƒë√£ format
        """
        symbol = signal['symbol']
        signal_type = signal['signal_type']
        price = signal['price']
        signal_time = signal['signal_time']
        confirm_time = signal['confirm_time']
        stoch_m15 = signal['stoch_m15']
        stoch_h1 = signal['stoch_h1']
        
        # Icon v√† text
        if signal_type == 'BUY':
            icon = "üü¢"
            type_text = "BUY/LONG"
        else:
            icon = "üî¥"
            type_text = "SELL/SHORT"
        
        # Format th·ªùi gian
        signal_time_str = signal_time.strftime('%H:%M %d-%m-%Y')
        confirm_time_str = confirm_time.strftime('%H:%M %d-%m-%Y')
        
        # Th√™m th√¥ng tin S/R n·∫øu c√≥
        sr_info = ""
        if signal.get('sr_zone'):
            sr_zone = signal['sr_zone']
            if sr_zone['low'] and sr_zone['high']:
                zone_type = "Support" if sr_zone['type'] == 'support' else "Resistance"
                sr_info = f"üìç V√πng {zone_type}: ${sr_zone['low']:.4f} - ${sr_zone['high']:.4f}\n"
        
        message = f"""
üî∂ Token: {symbol}
{icon} T√≠n hi·ªáu ƒë·∫£o chi·ªÅu {type_text}
‚è∞ Khung th·ªùi gian: H1
üí∞ Gi√° x√°c nh·∫≠n: {price:.4f}
{sr_info}---------------------------------
Th·ªùi gian g·ªëc: {signal_time_str}
Th·ªùi gian x√°c nh·∫≠n: {confirm_time_str}
Stoch (M15/H1): {stoch_m15:.2f} / {stoch_h1:.2f}
"""
        return message.strip()
    
    async def send_signal_to_channel(self, signal):
        """
        G·ª≠i t√≠n hi·ªáu l√™n channel
        
        Args:
            signal: Dict ch·ª©a th√¥ng tin t√≠n hi·ªáu
        """
        try:
            message = self.format_signal_message(signal)
            
            await self.app.bot.send_message(
                chat_id=config.TELEGRAM_CHANNEL_ID,
                text=message
            )
            
            logger.info(f"ƒê√£ g·ª≠i t√≠n hi·ªáu {signal['signal_type']} cho {signal['symbol']}")
            
            # L∆∞u v√†o database
            saved = self.db.save_signal(
                signal_id=signal['signal_id'],
                symbol=signal['symbol'],
                signal_type=signal['signal_type'],
                signal_time=signal['signal_time'],
                price=signal['price'],
                stoch_m15=signal['stoch_m15'],
                stoch_h1=signal['stoch_h1']
            )
            
            if saved:
                logger.info(f"ƒê√£ l∆∞u t√≠n hi·ªáu v√†o database (ID: {signal['signal_id']})")
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i t√≠n hi·ªáu: {str(e)}")
    
    async def scan_loop(self):
        """
        V√≤ng l·∫∑p qu√©t t√≠n hi·ªáu li√™n t·ª•c
        """
        logger.info("B·∫Øt ƒë·∫ßu qu√©t t√≠n hi·ªáu...")
        
        while True:
            try:
                # L·∫•y danh s√°ch symbols
                symbols = self.db.get_active_symbols()
                
                if not symbols:
                    logger.warning("Kh√¥ng c√≥ symbol n√†o trong watchlist")
                    await asyncio.sleep(60)
                    continue
                
                logger.info(f"Qu√©t {len(symbols)} symbols...")
                
                # Qu√©t t·ª´ng symbol
                for symbol in symbols:
                    try:
                        # Ki·ªÉm tra t√≠n hi·ªáu
                        signal = self.scanner.check_signal(symbol)
                        
                        if signal:
                            # Ki·ªÉm tra xem ƒë√£ g·ª≠i ch∆∞a b·∫±ng signal_id
                            signal_id = signal['signal_id']
                            
                            if not self.db.check_signal_exists(signal_id):
                                # G·ª≠i t√≠n hi·ªáu
                                await self.send_signal_to_channel(signal)
                            else:
                                logger.info(f"T√≠n hi·ªáu {signal['signal_type']} cho {symbol} ƒë√£ ƒë∆∞·ª£c g·ª≠i tr∆∞·ªõc ƒë√≥ (ID: {signal_id})")
                        
                        # Delay gi·ªØa c√°c symbol ƒë·ªÉ tr√°nh rate limit
                        await asyncio.sleep(2)
                        
                    except Exception as e:
                        logger.error(f"L·ªói khi qu√©t {symbol}: {str(e)}")
                        continue
                
                # Ch·ªù tr∆∞·ªõc khi qu√©t l·∫°i (m·∫∑c ƒë·ªãnh 60 gi√¢y)
                logger.info(f"Ho√†n th√†nh qu√©t. Ch·ªù {config.SCAN_INTERVAL} gi√¢y...")
                await asyncio.sleep(config.SCAN_INTERVAL)
                
            except Exception as e:
                logger.error(f"L·ªói trong v√≤ng l·∫∑p qu√©t: {str(e)}")
                await asyncio.sleep(60)
    
    async def start_bot(self):
        """Kh·ªüi ƒë·ªông bot"""
        logger.info("Kh·ªüi ƒë·ªông bot...")
        
        # Kh·ªüi t·∫°o bot
        await self.app.initialize()
        await self.app.start()
        
        # B·∫Øt ƒë·∫ßu nh·∫≠n l·ªánh
        await self.app.updater.start_polling(drop_pending_updates=True)
        
        logger.info("Bot ƒë√£ s·∫µn s√†ng!")
        
        # B·∫Øt ƒë·∫ßu qu√©t t√≠n hi·ªáu
        await self.scan_loop()
    
    async def stop_bot(self):
        """D·ª´ng bot"""
        logger.info("ƒêang d·ª´ng bot...")
        await self.app.updater.stop()
        await self.app.stop()
        await self.app.shutdown()
        self.db.close()
        logger.info("Bot ƒë√£ d·ª´ng")
    
    def run(self):
        """Ch·∫°y bot"""
        try:
            asyncio.run(self.start_bot())
        except KeyboardInterrupt:
            logger.info("Nh·∫≠n t√≠n hi·ªáu d·ª´ng t·ª´ ng∆∞·ªùi d√πng")
        except Exception as e:
            logger.error(f"L·ªói: {str(e)}")
        finally:
            asyncio.run(self.stop_bot())


if __name__ == '__main__':
    bot = TelegramBot()
    bot.run()