"""
Bot Telegram - CryptoVN 101
Ch·ªâ g·ª≠i t√≠n hi·ªáu Stoch + S/R
"""

import asyncio
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.constants import ParseMode

import config
from database import DatabaseManager
from signal_scanner import SignalScanner

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class TelegramBot:
    """L·ªõp qu·∫£n l√Ω Telegram Bot - CH·ªà STOCH + S/R"""
    
    def __init__(self):
        """Kh·ªüi t·∫°o bot"""
        self.db = DatabaseManager()
        self.scanner = SignalScanner()
        self.app = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
        
        self.app.add_handler(CommandHandler("start", self.cmd_start))
        self.app.add_handler(CommandHandler("add", self.cmd_add))
        self.app.add_handler(CommandHandler("remove", self.cmd_remove))
        self.app.add_handler(CommandHandler("list", self.cmd_list))
        self.app.add_handler(CommandHandler("help", self.cmd_help))
        
        self._init_default_symbols()
    
    def _init_default_symbols(self):
        """Th√™m c√°c symbol m·∫∑c ƒë·ªãnh v√†o database"""
        for symbol in config.DEFAULT_SYMBOLS:
            symbol_clean = symbol.replace('/', '')
            self.db.add_symbol(symbol_clean)
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """L·ªánh /start"""
        welcome_msg = """
ü§ñ <b>Bot CryptoVN 101 - T√≠n hi·ªáu Stoch + S/R</b>

Ch√†o m·ª´ng! Bot s·∫Ω t·ª± ƒë·ªông g·ª≠i t√≠n hi·ªáu:

<b>üìä Stoch + S/R</b>
- Stochastic th·ªèa ng∆∞·ª°ng (H1 & M15)
- Price Action t·∫°i v√πng Support/Resistance
- Ki·ªÉm tra tr√™n c·∫£ khung M15 v√† H1

<b>C√°c l·ªánh:</b>
/add BTCUSDT - Th√™m coin
/remove BTCUSDT - X√≥a coin
/list - Xem danh s√°ch
/help - H∆∞·ªõng d·∫´n chi ti·∫øt
"""
        await update.message.reply_text(welcome_msg, parse_mode=ParseMode.HTML)
    
    async def cmd_add(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """L·ªánh /add SYMBOL"""
        if not context.args:
            await update.message.reply_text("‚ö†Ô∏è C√°ch d√πng: /add BTCUSDT")
            return
        
        symbol = context.args[0]
        success, message = self.db.add_symbol(symbol)
        await update.message.reply_text(message)
        
        if success:
            logger.info(f"ƒê√£ th√™m {symbol} v√†o watchlist")
    
    async def cmd_remove(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """L·ªánh /remove SYMBOL"""
        if not context.args:
            await update.message.reply_text("‚ö†Ô∏è C√°ch d√πng: /remove BTCUSDT")
            return
        
        symbol = context.args[0]
        success, message = self.db.remove_symbol(symbol)
        await update.message.reply_text(message)
        
        if success:
            logger.info(f"ƒê√£ x√≥a {symbol} kh·ªèi watchlist")
    
    async def cmd_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """L·ªánh /list"""
        watchlist = self.db.get_watchlist_info()
        
        if not watchlist:
            await update.message.reply_text("üìã Danh s√°ch theo d√µi ƒëang tr·ªëng")
            return
        
        msg = f"üìã <b>Danh s√°ch ƒëang theo d√µi ({len(watchlist)} coin):</b>\n\n"
        
        for idx, item in enumerate(watchlist, 1):
            added_time = item['added_at'].strftime('%d-%m-%Y %H:%M')
            msg += f"{idx}. <code>{item['symbol']}</code>\n"
            msg += f"   ‚îú Th√™m l√∫c: {added_time}\n\n"
        
        await update.message.reply_text(msg, parse_mode=ParseMode.HTML)
    
    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """L·ªánh /help"""
        help_msg = """
üìö <b>H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG BOT</b>

<b>1. Th√™m coin theo d√µi:</b>
/add BTCUSDT
/add BTC (t·ª± ƒë·ªông th√™m USDT)

<b>2. X√≥a coin:</b>
/remove BTCUSDT

<b>3. Xem danh s√°ch:</b>
/list

<b>4. T√≠n hi·ªáu Stoch + S/R:</b>

üü¢ <b>LONG (MUA):</b>
- Stoch H1 < 25 & M15 < 25
- N·∫øn ch·∫°m v√πng h·ªó tr·ª£ tr√™n M15 v√†/ho·∫∑c H1

üî¥ <b>SHORT (B√ÅN):</b>
- Stoch H1 > 75 & M15 > 75
- N·∫øn ch·∫°m v√πng kh√°ng c·ª± tr√™n M15 v√†/ho·∫∑c H1

‚ö†Ô∏è <b>L∆∞u √Ω:</b>
- ƒê√¢y ch·ªâ l√† c√¥ng c·ª• h·ªó tr·ª£
- Lu√¥n s·ª≠ d·ª•ng stop loss
- Kh√¥ng giao d·ªãch to√†n b·ªô v·ªën
"""
        await update.message.reply_text(help_msg, parse_mode=ParseMode.HTML)
    
    def format_signal_message(self, signal):
        """Format message cho t√≠n hi·ªáu"""
        symbol = signal['symbol']
        signal_type = signal['signal_type']
        price = signal['price']
    
        icon = "üü¢" if signal_type == 'BUY' else "üî¥"
        type_text = "BUY/LONG" if signal_type == 'BUY' else "SELL/SHORT"
    
        sr_type = signal.get('sr_type', 'support/resistance')
        timeframes = signal.get('timeframes', 'H1')
        sr_name = "h·ªó tr·ª£" if sr_type == 'support' else "kh√°ng c·ª±"
    
        message = f"üî∂ Token: {symbol} (Bybit)\n\n"
        message += f"{icon} T√≠n hi·ªáu ƒë·∫£o chi·ªÅu {type_text}\n\n"
        message += f"‚è∞ Ph·∫£n ·ª©ng v·ªõi {sr_name} khung {timeframes}\n\n"
        message += f"üí∞ Gi√° x√°c nh·∫≠n: ${price:.4f}"
        
        return message.strip()
    
    async def send_signal_to_channel(self, signal):
        """G·ª≠i t√≠n hi·ªáu l√™n channel"""
        try:
            message = self.format_signal_message(signal)
            
            await self.app.bot.send_message(
                chat_id=config.TELEGRAM_CHANNEL_ID,
                text=message
            )
            
            logger.info(f"ƒê√£ g·ª≠i t√≠n hi·ªáu {signal['signal_type']} cho {signal['symbol']}")
            
            saved = self.db.save_signal(
                signal_id=signal['signal_id'],
                symbol=signal['symbol'],
                signal_type=signal['signal_type'],
                signal_time=signal['signal_time'],
                price=signal['price'],
                stoch_m15=signal['stoch_m15'],
                stoch_h1=signal['stoch_h1']
            )
            
            if saved:
                logger.info(f"ƒê√£ l∆∞u t√≠n hi·ªáu v√†o database (ID: {signal['signal_id']})")
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i t√≠n hi·ªáu: {str(e)}")
    
    async def scan_loop(self):
        """V√≤ng l·∫∑p qu√©t t√≠n hi·ªáu li√™n t·ª•c"""
        logger.info("B·∫Øt ƒë·∫ßu qu√©t t√≠n hi·ªáu...")
        
        while True:
            try:
                symbols = self.db.get_active_symbols()
                
                if not symbols:
                    logger.warning("Kh√¥ng c√≥ symbol n√†o trong watchlist")
                    await asyncio.sleep(60)
                    continue
                
                logger.info(f"Qu√©t {len(symbols)} symbols...")
                
                for symbol in symbols:
                    try:
                        signal = self.scanner.check_signal(symbol)
                        
                        if signal:
                            signal_id = signal['signal_id']
                            
                            if not self.db.check_signal_exists(signal_id):
                                await self.send_signal_to_channel(signal)
                            else:
                                logger.info(f"T√≠n hi·ªáu {signal['signal_type']} cho {symbol} ƒë√£ ƒë∆∞·ª£c g·ª≠i tr∆∞·ªõc ƒë√≥")
                        
                        await asyncio.sleep(2)
                        
                    except Exception as e:
                        logger.error(f"L·ªói khi qu√©t {symbol}: {str(e)}")
                        continue
                
                logger.info(f"Ho√†n th√†nh qu√©t. Ch·ªù {config.SCAN_INTERVAL} gi√¢y...")
                await asyncio.sleep(config.SCAN_INTERVAL)
                
            except Exception as e:
                logger.error(f"L·ªói trong v√≤ng l·∫∑p qu√©t: {str(e)}")
                await asyncio.sleep(60)
    
    async def start_bot(self):
        """Kh·ªüi ƒë·ªông bot"""
        logger.info("Kh·ªüi ƒë·ªông bot...")
        
        await self.app.initialize()
        await self.app.start()
        await self.app.updater.start_polling(drop_pending_updates=True)
        
        logger.info("Bot ƒë√£ s·∫µn s√†ng! Ch·ªâ g·ª≠i t√≠n hi·ªáu Stoch + S/R")
        
        await self.scan_loop()
    
    async def stop_bot(self):
        """D·ª´ng bot"""
        logger.info("ƒêang d·ª´ng bot...")
        await self.app.updater.stop()
        await self.app.stop()
        await self.app.shutdown()
        self.db.close()
        logger.info("Bot ƒë√£ d·ª´ng")
    
    def run(self):
        """Ch·∫°y bot"""
        try:
            asyncio.run(self.start_bot())
        except KeyboardInterrupt:
            logger.info("Nh·∫≠n t√≠n hi·ªáu d·ª´ng t·ª´ ng∆∞·ªùi d√πng")
        except Exception as e:
            logger.error(f"L·ªói: {str(e)}")
        finally:
            asyncio.run(self.stop_bot())


if __name__ == '__main__':
    bot = TelegramBot()
    bot.run()